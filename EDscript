
print("working")
wait(5)

local GUI = Instance.new("ScreenGui")
local MainFrame = Instance.new("Frame")
local TurnOnButton = Instance.new("TextButton")
local TurnOffButton = Instance.new("TextButton")

GUI.Parent = game:GetService("Players").LocalPlayer.PlayerGui
GUI.Name = "AutoFarmGUI"
GUI.ResetOnSpawn = false

MainFrame.Parent = GUI
MainFrame.BackgroundColor3 = Color3.new(0, 0, 0)
MainFrame.BorderColor3 = Color3.new(1, 0, 0)
MainFrame.BorderSizePixel = 2
MainFrame.Position = UDim2.new(0.5, -100, 0, 10)
MainFrame.Size = UDim2.new(0, 200, 0, 60)

TurnOnButton.Parent = MainFrame
TurnOnButton.BackgroundColor3 = Color3.new(0, 1, 0)
TurnOnButton.Position = UDim2.new(0.1, 0, 0.5, -15)
TurnOnButton.Size = UDim2.new(0, 80, 0, 30)
TurnOnButton.Text = "Turn On"
TurnOnButton.TextColor3 = Color3.new(1, 1, 1)
TurnOnButton.TextSize = 14

TurnOffButton.Parent = MainFrame
TurnOffButton.BackgroundColor3 = Color3.new(1, 0, 0)
TurnOffButton.Position = UDim2.new(0.6, 0, 0.5, -15)
TurnOffButton.Size = UDim2.new(0, 80, 0, 30)
TurnOffButton.Text = "Turn Off"
TurnOffButton.TextColor3 = Color3.new(1, 1, 1)
TurnOffButton.TextSize = 14

local autofarmEnabled = true

TurnOnButton.MouseButton1Click:Connect(function()
    getgenv().autofarm = true
    autofarmEnabled = true
end)

TurnOffButton.MouseButton1Click:Connect(function()
    getgenv().autofarm = false
    autofarmEnabled = false
end)

local args = {
    [1] = "Relics",
    [2] = "c061c0e0-68a7-469d-9143-556d417a641e"
}

print(args[2])
repeat task.wait() until game:IsLoaded()
getgenv().autofarm = true

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Services = ReplicatedStorage:WaitForChild("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services")
local PartyService = Services:WaitForChild("PartyService")
local GetPartyFromPlayer = PartyService:WaitForChild("RF"):WaitForChild("GetPartyFromPlayer")
local VoteOn = PartyService:WaitForChild("RF"):WaitForChild("VoteOn")
local StartDungeon = Services:WaitForChild("DungeonService"):WaitForChild("RF"):WaitForChild("StartDungeon")

function getCurrentMap()
    local mapsFolder = workspace.Map
    if mapsFolder then
        for _, map in ipairs(mapsFolder:GetChildren()) do
            if map:IsA("Folder") and map:FindFirstChild("PlayerSpawns") then
                return map
            end
        end
    end
    return nil
end

function getSpawnCFrame()
    local currentMap = getCurrentMap()
    if currentMap then
        local spawnLocation = currentMap:FindFirstChild("PlayerSpawns") and currentMap.PlayerSpawns[0] and currentMap.PlayerSpawns[0].Part and currentMap.PlayerSpawns[0].Part.SpawnLocation
        if spawnLocation and spawnLocation:IsA("BasePart") then
            return spawnLocation.CFrame
        end
    end
    return nil
end

local swordArgs = {
    [1] = {
        ["Direction"] = nil,
        ["Position"] = nil,
        ["Origin"] = nil
    }
}


local RunService = game:GetService("RunService")
local lastDestroyTime = 0
local destroyInterval = 5  

 


RunService.RenderStepped:Connect(destroyIceIllusionMobs)




function createDungeon(name, difficulty, join, hardcore)
    CreateParty:InvokeServer(name, difficulty, join, not hardcore and "Normal")
    StartParty:InvokeServer(GetPartyFromPlayer:InvokeServer(LocalPlayer)['Data']['UUID'])
end

function createDungeon(name, difficulty, join, hardcore)
    CreateParty:InvokeServer(name, difficulty, join, not hardcore and "Normal")
    StartParty:InvokeServer(GetPartyFromPlayer:InvokeServer(LocalPlayer)['Data']['UUID'])
end


function retry()
    VoteOn:InvokeServer("Retry")
end

function goNext()
    VoteOn:InvokeServer("Next")
end

if game.PlaceId == 10515146389 then
    createDungeon("SnowCastle", "Hell", "All", "Normal")
end

function startDungeon()
    StartDungeon:InvokeServer()
end

function getAliveMobs()
    local mobs = {}
 
    for _,v in next, workspace.Mobs:GetChildren() do
        if v:FindFirstChild("Humanoid") and v.PrimaryPart and v.Humanoid.Health > 0 then
            table.insert(mobs, v)
        end
    end
    return mobs
end

local currentTarget = nil



local player = game:GetService("Players").LocalPlayer
local element = player.Backpack.Tool.ModuleReference
local Elements = game:GetService("ReplicatedStorage").ReplicatedStorage.Abilities.Elements:GetChildren()


spawn(function()
while true do
if getgenv().autofarm == true then
for _, v1 in ipairs(Elements) do
local name = tostring(element.Value)
    if v1.Name == name then 
        local v3 = v1:GetChildren()
            for _, v2 in ipairs(v3) do
    print(v2)
                local args = {
    [1] = v2,
    [2] = {
        ["Direction"] = nil --[[Vector3]],
        ["Position"] = nil --[[Vector3]],
        ["Origin"] = nil --[[Vector3]]
    },
    [3] = "Start"
}

game:GetService("ReplicatedStorage").ReplicatedStorage.Abilities.Templates.ToolTemplate.RemoteEvent:FireServer(unpack(args))
------------
         local args = {
    [1] = v2,
    [2] = {
        ["Direction"] = nil --[[Vector3]],
        ["Position"] = nil --[[Vector3]],
        ["Origin"] = nil --[[Vector3]]
    },
    [3] = "End"
}

game:GetService("ReplicatedStorage").ReplicatedStorage.Abilities.Templates.ToolTemplate.RemoteEvent:FireServer(unpack(args))

wait(1)
end
                end
            end
        end
    end    
end)
print("hello")






function chooseNewTarget()
    local spawnCFrame = getSpawnCFrame()
    if not spawnCFrame then
        return
    end
    startDungeon()
    local mobs = getAliveMobs()

    for _, mob in ipairs(mobs) do
        if mob:FindFirstChild("Humanoid") then
            local mobCFrame = mob.PrimaryPart.CFrame
            if mobCFrame.Y >= spawnCFrame.Y - 30 then
                currentTarget = mob
                return
            end
        end
    end
    currentTarget = nil
end
local function destroyIceIllusionMobs()
    while true do
       
        local currentTime = tick()
        if workspace.Mobs:FindFirstChild("[Lv. 85] Ice Illusion") then
            local timeSinceLastDestroy = currentTime - lastDestroyTime
            if timeSinceLastDestroy >= destroyInterval then
                workspace.Mobs["[Lv. 85] Ice Illusion"]:Destroy()
                lastDestroyTime = currentTime
            end
        end
        wait(1)  --  control the frequency of checks
    end
end
function teleportBehindMob(mob)
    if LocalPlayer.Character and LocalPlayer.Character.PrimaryPart and mob.PrimaryPart and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
                    if workspace.Mobs:FindFirstChild("[Lv. 75] Ice Illusion") then
            workspace.Mobs["[Lv. 75] Ice Illusion"]:Destroy() 
        

        end
 if workspace.Mobs:FindFirstChild("[Lv. 85] Ice Illusion") then
            workspace.Mobs["[Lv. 85] Ice Illusion"]:Destroy() 

        
        end
        if workspace.Mobs:FindFirstChild("[Lv. 95] Ice Illusion") then
            workspace.Mobs["[Lv. 95] Ice Illusion"]:Destroy()


        end
        local mobCFrame = mob.PrimaryPart.CFrame
        local targetPosition = mobCFrame.p - mobCFrame.lookVector * 5
        LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
    end
end

function attackMob(mob)
    if LocalPlayer.Character and LocalPlayer.Character.PrimaryPart and mob.PrimaryPart and mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
        local oldHealth = mob.Humanoid.Health
        repeat
            if not LocalPlayer.Character or not LocalPlayer.Character.PrimaryPart then
                break
            end
            
            local mobCFrame = mob.PrimaryPart.CFrame
            
            -- Calculate the direction vector towards the target mob
            local direction = (mobCFrame.p - LocalPlayer.Character.PrimaryPart.Position).unit
            
            -- Teleport behind the mob
            teleportBehindMob(mob)
            
            -- Make the player face the direction of the mob
            LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(LocalPlayer.Character.PrimaryPart.Position, mobCFrame.p))
            
            game:GetService("ReplicatedStorage").ReplicatedStorage.Packages.Knit.Services.WeaponService.RF.UseSword:InvokeServer()
            
            task.wait()
        until mob.Humanoid.Health ~= oldHealth or #mob.Humanoid:GetPlayingAnimationTracks() > 1
    end
end

function pickupShit()
    for _,v in next, workspace.Camera.Drops:GetChildren() do
        if v:FindFirstChild("Center") and v.Center:FindFirstChild("ProximityPrompt") then
            fireproximityprompt(v.Center.ProximityPrompt)
            print()
        end
    end 
end

function updateTarget()
    while getgenv().autofarm do
        if not currentTarget or (currentTarget and currentTarget:FindFirstChild("Humanoid") and currentTarget.Humanoid.Health <= 0) then
            wait()  
             if workspace.Mobs:FindFirstChild("[Lv. 75] Ice Illusion") then
            workspace.Mobs["[Lv. 75] Ice Illusion"]:Destroy() 
        
        end
 if workspace.Mobs:FindFirstChild("[Lv. 85] Ice Illusion") then
            workspace.Mobs["[Lv. 85] Ice Illusion"]:Destroy() 
        
        end
        if workspace.Mobs:FindFirstChild("[Lv. 95] Ice Illusion") then
            workspace.Mobs["[Lv. 95] Ice Illusion"]:Destroy()
        end
            chooseNewTarget()
        end

        if currentTarget then
            attackMob(currentTarget)
        end
         if game:GetService("Players").LocalPlayer.PlayerGui.DungeonComplete.Main.Visible then
       
        retry()
    end
        
        wait()
    end
end

task.spawn(updateTarget)
